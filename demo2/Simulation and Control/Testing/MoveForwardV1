/*
 * The Seedsters
 * Created by Scott Reeder
 * 
 * This code implements a closed loop step response for forward motion of the robot. It then prints out time
 * and velocity values to the serial monitor.
 */
 
#include <DualMC33926MotorShield.h>


//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//\\\\\\\ MOTOR 1 == RIGHT MOTOR   \\\\\\\\\\  MOTOR 2 == LEFT MOTOR \\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////////////////////////////////////////
DualMC33926MotorShield md;

// Pin A and pin B define the CLK and DT outputs of the encoder, respectively
#define MOTORVOLTAGE  400
#define MICROS_TO_SECONDS .000001
#define MILLIS_TO_SECONDS .001
#define DEG_TO_RAD 0.017453293
#define MM_TO_CM 0.1

const int LEFT_PIN_A = 3; //encoder 1 pin A
const int LEFT_PIN_B = 11; //encoder 1 pin B
const int RIGHT_PIN_A = 2; //encoder 2 pin A
const int RIGHT_PIN_B = 5; //encoder 2 pin B

// This program uses a state machine to track the encoderâ€™s position
// These variables store the state of the encoder
bool A_CURRENT_STATE_LEFT = 0;
bool B_CURRENT_STATE_LEFT = 0;
bool A_CURRENT_STATE_RIGHT = 0;
bool B_CURRENT_STATE_RIGHT = 0;

//These Varialbes calculate the time between encoder counts
long leftMotorDT = 0;
long leftMotorPrevTime = 0;
long rightMotorDT = 0;
long rightMotorPrevTime = 0;
int leftCountAccumulate = 0;
int rightCountAccumulate = 0;

//These variables store the discrete instantaneous angular velocity
double leftMotorAngularVelocity = 0;
double rightMotorAngularVelocity = 0;

double leftMotorVelocity = 0;
double rightMotorVelocity = 0;
double leftMotorPrevVelocity = 0;
double rightMotorPrevVelocity = 0;
double leftVelocityInt = 0;
double rightVelocityInt = 0;
int leftMotorVal = 0;
int rightMotorVal = 0;

int index = 0;
int rWheel = 74; //radius of wheel in mm

int countLeft; // measures left motor encoder counts -- counts
int countRight; // measures right motor encoder counts -- counts     
int prevMyTime = 0; //previous loop time marker -- milliseconds 
int currMyTime = 0; //current time marker -- milliseconds 
//int prev_pos = 0; // stores the position of the motor in the previous loop -- position in degrees
int target = 0; // target position -- position in degrees

int intError = 0; //integral error for I in PI controller -- tenths of a degree second       
//int prev_posLeft = 0; // stores the position of the motor in the previous loop -- position in degrees
//int prev_posRight = 0; // stores the position of the motor in the previous loop -- position in degrees

int Tminus1 = 0;
int T = 0;
// Proportional controller constants


double velocitySetPoint = 0; // this is the desired velocity of the robot (forward)
double currentPosLeft = 0; //left motor position in degrees
double currentPosRight = 0;//right motor position in degrees

const double Kp_forwardVelLeft = 0.1233;
const double Kp_forwardVelRight = 0.7105;
const double Ki_forwardVelLeft = 4.9861;
const double Ki_forwardVelRight = 5.8075;

int wait = 0; // tracks the current time to determine when the 1 second wait is up 
int beginTime = 0; // the time when the void setup ends
bool start = 1; // ensures that the motors are only set to step once

void setup() {

  // Encoder pins
  pinMode(LEFT_PIN_A, INPUT);
  pinMode(LEFT_PIN_B, INPUT);
  pinMode(RIGHT_PIN_A, INPUT);
  pinMode(RIGHT_PIN_B, INPUT);

  Serial.begin(115200);
  
  // Setting up the interrupt handler 
  // Activates whenever the CLK pin on the encoder changes voltage
  attachInterrupt(digitalPinToInterrupt(LEFT_PIN_A), LeftTick, CHANGE); 
  attachInterrupt(digitalPinToInterrupt(RIGHT_PIN_A), RightTick, CHANGE);
  md.init(); //initialize  motor
  delay(500); //delay to let motor initialize
  wait = millis();
  beginTime = wait;
}

void loop() {

  if(start && ((wait-beginTime) >995)){ //do nothing for 1 second then start the step response
    velocitySetPoint = 40;
    start = 0;
    Tminus1 = wait;
  }
  else if (start)wait = millis();
  
  //calculate forward velocity in cm/s from angular velocity deg/s
  leftMotorVelocity = (leftMotorAngularVelocity*DEG_TO_RAD)*double(rWheel)*MM_TO_CM; 
  rightMotorVelocity = (rightMotorAngularVelocity*DEG_TO_RAD)*double(rWheel)*MM_TO_CM;
  
  //calculate current position
  currentPosLeft = double(countLeft)/4.44;
  currentPosRight = double(countRight)/4.44;
  
  // implement the PI controller
  T = millis();

  leftVelocityInt += (velocitySetPoint-leftMotorVelocity)*(T-Tminus1)*MILLIS_TO_SECONDS;
  rightVelocityInt += (velocitySetPoint-rightMotorVelocity)*(T-Tminus1)*MILLIS_TO_SECONDS;
  //intError = (velocitySetPoint-currentVelocity)*(T-Tminus1);
  leftMotorVal = Kp_forwardVelLeft*(velocitySetPoint-leftMotorVelocity)+Ki_forwardVelLeft*(leftVelocityInt);
  rightMotorVal = Kp_forwardVelRight*(velocitySetPoint-rightMotorVelocity)+Ki_forwardVelRight*(rightVelocityInt);
  md.setM1Speed(rightMotorVal);
  md.setM2Speed(leftMotorVal);
  currMyTime = millis() - beginTime;

  //print out the data
  Serial.print(currMyTime);
  Serial.print(", ");
  Serial.print(leftMotorVelocity);
  Serial.print(", ");
  Serial.print(rightMotorVelocity);
  Serial.println();
 
  delay(5);
  
  if (millis() >=4000+wait){ //Stop the response after 3 seconds
    md.setM1Speed(0);
    md.setM2Speed(0);
    while(1);
  }
  //update the previous values
  Tminus1=T;
}



// Encoder interrupt
void LeftTick() {
  leftCountAccumulate ++;
  if(leftCountAccumulate >= 10){
    leftCountAccumulate = 0;
    leftMotorDT = micros()-leftMotorPrevTime;
    leftMotorPrevTime = micros();
    leftMotorAngularVelocity = (10.0/4.44)/(leftMotorDT*MICROS_TO_SECONDS);
  }

  A_CURRENT_STATE_LEFT = digitalRead(LEFT_PIN_A);//read state of signal A
  B_CURRENT_STATE_LEFT = digitalRead(LEFT_PIN_B);//read state of signal B
  
  if (A_CURRENT_STATE_LEFT==B_CURRENT_STATE_LEFT){ //if the signals are the same

    countLeft-=1;//subract from the count
    leftMotorAngularVelocity = -leftMotorAngularVelocity;
  }
  else {//if signals are different
    countLeft+=1;//add 2 to the count
  }
}

void RightTick() {
  rightCountAccumulate ++;
  if(rightCountAccumulate >= 10){
    rightCountAccumulate = 0;
    rightMotorDT = micros()-rightMotorPrevTime;
    rightMotorPrevTime = micros();
    rightMotorAngularVelocity = (10.0/4.44)/(rightMotorDT*MICROS_TO_SECONDS); 
  }

  A_CURRENT_STATE_RIGHT = digitalRead(RIGHT_PIN_A); //read state of signal A
  B_CURRENT_STATE_RIGHT = digitalRead(RIGHT_PIN_B); //read state of signal B
  
  if (A_CURRENT_STATE_RIGHT==B_CURRENT_STATE_RIGHT){ //if the signals are the same

    countRight+=1;//subract from the count
  }
  else {//if signals are different
    countRight-=1;//add 2 to the count
    rightMotorAngularVelocity = -rightMotorAngularVelocity;
  }
}
