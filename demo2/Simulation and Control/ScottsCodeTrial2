/*
 * The Seedsters
 * Created by Scott Reeder
 * 
 * This code tests the velocity measurement of the robot
 */

#include <DualMC33926MotorShield.h>


//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//\\\\\\\ MOTOR 1 == RIGHT MOTOR   \\\\\\\\\\  MOTOR 2 == LEFT MOTOR \\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////////////////////////////////////////
DualMC33926MotorShield md;//create motor object

// Pin A and pin B define the CLK and DT outputs of the encoder, respectively
#define MOTORVOLTAGE  400
#define MICROS_TO_SECONDS .000001
#define DEG_TO_RAD 0.017453293
#define MM_TO_CM 0.1
#define FEET_TO_CM 30.48
#define MILLIS_TO_SECONDS .001

double targetInFeet = 0; // target position (feet)
double targetVelocity = 0; //target velocity (cm/s)

//These are the encoder pins on the arduino
const int LEFT_PIN_A = 3; //encoder 1 pin A
const int LEFT_PIN_B = 11; //encoder 1 pin B
const int RIGHT_PIN_A = 2; //encoder 2 pin A
const int RIGHT_PIN_B = 5; //encoder 2 pin B

// These variables store the state of the encoder
bool A_CURRENT_STATE_LEFT = 0;
bool B_CURRENT_STATE_LEFT = 0;
bool A_CURRENT_STATE_RIGHT = 0;
bool B_CURRENT_STATE_RIGHT = 0;

//These variables used in angular velocity calculations in the encoder ISR
long leftMotorDT = 0; //time elapsed since last 10 encoder counts of left motor (microseconds)
long leftMotorPrevTime = 0; //time stamp of last left angular velocity calculation (microseconds)
long rightMotorDT = 0; //time elapsed since last 10 encoder counts of right motor
long rightMotorPrevTime = 0; //time stamp of last right angular velocity calculation (microseconds)
int leftCountAccumulate = 0; //counts left encoder counts to slow velocity calculation to every 10 counts (counts)
int rightCountAccumulate = 0; //counts right encoder counts to slow velocity calculation to every 10 counts (counts)
int rightDirection = 0; //used to change sign of velocity if right motor direction switches 
int leftDirection = 0; //used to change sign of velocity if left motor direction switches

//These variables store the discrete instantaneous angular velocity
double leftMotorAngularVelocity = 0;
double rightMotorAngularVelocity = 0;

//Instantaneous forward velocity
double leftMotorVelocity = 0;
double rightMotorVelocity = 0;

int index = 0;
int rWheel = 74; //radius of wheel in mm

int countLeft; // measures left motor encoder counts -- counts
int countRight; // measures right motor encoder counts -- counts

//int intError = 0; //integral error for I in PI controller       
int prevMyTime = 0; //previous loop time marker -- milliseconds 
int currMyTime = 0; //current time marker -- milliseconds 
//int prev_pos = 0; // stores the position of the motor in the previous loop -- position in degrees

double motorVal = 0;//variable to hold the value we write to the motor -- units in degrees

double currentPosLeft = 0; // current position of the left motor (degrees)
double currentPosRight = 0; // current position of the right motor (degrees)
double robotPosition = 0; //position of the robot (average of left and right positions) (cm)
double forwardPositionInt = 0; //set position - current position (cm)
int positionErrorTimePrev = 0; //stores time that position error was last updated (milliseconds)
int positionErrorTimeCurr = 0; //stores time at position error update (milliseconds)

double leftVelocityInt = 0; //integral term for left motor velocity (cms)
double rightVelocityInt = 0; //integral term for right motor velocity (cms)///////////////////////////////////////check units here
int velocityLeftErrorTimeCurr = 0; //stores time at left velocity error update (milliseconds)
int velocityRightErrorTimeCurr = 0; //stores time at right velocity error update (milliseconds)
int velocityLeftErrorTimePrev = 0; //stores time that left velocity error was last updated (milliseconds)
int velocityRightErrorTimePrev = 0; //stores time that right velocity error was last updated (milliseconds)
int motorValLeft = 0; //value from -400 to 400 written to the left motor
int motorValRight = 0; //value from -400 to 400 written to the right motor


//controller constants
const double Kp_forwardPos = 0.29867;
const double Ki_forwardPos = 0.0015283;
const double Kp_forwardVelLeft = 0.1233;
const double Kp_forwardVelRight = 0.7105;
const double Ki_forwardVelLeft = 4.9861;
const double Ki_forwardVelRight = 5.8075;

int wait = 0; // tracks the current time to determine when the 1 second wait is up 
int beginTime = 0; // the time when the void setup ends
bool start = 1; // ensures that the motors are only set to step once

int Tminus1 = 0;
int T = 0;

void setup() {

  // Intialize Encoder pins
  pinMode(LEFT_PIN_A, INPUT);
  pinMode(LEFT_PIN_B, INPUT);
  pinMode(RIGHT_PIN_A, INPUT);
  pinMode(RIGHT_PIN_B, INPUT);

  Serial.begin(115200);
  
  // Setting up the interrupt handler 
  // Activates whenever the CLK pin on the encoder changes voltage
  attachInterrupt(digitalPinToInterrupt(LEFT_PIN_A), LeftTick, CHANGE); 
  attachInterrupt(digitalPinToInterrupt(RIGHT_PIN_A), RightTick, CHANGE);
  md.init(); //initialize  motor
  delay(500); //delay to let motor initialize
  wait = millis(); //get the current program time
  beginTime = wait; //store the program time as the begining of the void loop
}

void loop() {

  // Normalizing the unitless encoder counts into a 360 degree rotation

  if(start && ((wait-beginTime) >995)){ //when 1 second has elapsed, begin the step response
    //set motors to final step value
    targetInFeet = 2;
    start = 0;// note that motors have already been set
  }
  else if (start)wait = millis();
  CALCULATIONS();
  
  md.setM1Speed(motorValRight);
  md.setM2Speed(motorValLeft);
  currMyTime = millis() - beginTime; // remove program startup time from time measurement variable
  //Print out the necessary values
  //Serial.print(currMyTime);
//  Serial.print(", ");
  Serial.print(currMyTime);
  Serial.print(", ");
  Serial.print(motorValLeft);
  Serial.print(", ");
  Serial.print(motorValRight);
  Serial.print(", ");
  Serial.print(targetVelocity);
  Serial.println();
 
  delay(5);
  
  if (millis() >=9000+wait){ //stop the response after 3 seconds
    md.setM1Speed(0);
    md.setM2Speed(0);
    while(1);
  }

}
void LEFT_MOTOR_MOVE(){ //this is for rotating the robot (left motor)

}

void RIGHT_MOTOR_MOVE(){ //this is for rotating the robot (right motor)
  
}
void MOTOR_MOVE(){
  
}
void CALCULATIONS(){

  T = millis();
  
  //if there are no encoder counts for 100ms, reset the angular velocity to 0
  if(micros() - rightMotorPrevTime >= 100000)rightMotorAngularVelocity = 0;
  if(micros() - leftMotorPrevTime >= 100000)leftMotorAngularVelocity = 0;

  //calculates the motor velocity in cm/s
  leftMotorVelocity = (leftMotorAngularVelocity*DEG_TO_RAD)*double(rWheel)*MM_TO_CM; 
  rightMotorVelocity = (rightMotorAngularVelocity*DEG_TO_RAD)*double(rWheel)*MM_TO_CM;

  //calculate the position of each wheel
  currentPosLeft = double(countLeft)/4.44;
  currentPosRight = double(countRight)/4.44;

  //calculated the position of the robot
  robotPosition = ((currentPosLeft+currentPosRight)*DEG_TO_RAD)*double(rWheel)*MM_TO_CM / 2;

  //calculate the forward position error
  positionErrorTimeCurr = millis();
  forwardPositionInt += (targetInFeet*FEET_TO_CM - robotPosition)*double((positionErrorTimeCurr-positionErrorTimePrev))*MILLIS_TO_SECONDS;
  positionErrorTimePrev = positionErrorTimeCurr;

  //calculate velocity set point
  targetVelocity = Kp_forwardPos*(targetInFeet*FEET_TO_CM - robotPosition)+Ki_forwardPos*forwardPositionInt;
  
  //calculate the velocity error
  velocityLeftErrorTimeCurr = millis();
  velocityRightErrorTimeCurr = millis();
  leftVelocityInt += (targetVelocity - leftMotorVelocity)*double((velocityLeftErrorTimeCurr-velocityLeftErrorTimePrev))*MILLIS_TO_SECONDS;
  rightVelocityInt += (targetVelocity - rightMotorVelocity)*double((velocityRightErrorTimeCurr-velocityRightErrorTimePrev))*MILLIS_TO_SECONDS;
  //calculate the velocity set values for each motor
  leftVelocityInt += (targetVelocity-leftMotorVelocity)*double((velocityLeftErrorTimeCurr-velocityLeftErrorTimePrev))*MILLIS_TO_SECONDS;
  rightVelocityInt += (targetVelocity-rightMotorVelocity)*double((velocityRightErrorTimeCurr-velocityRightErrorTimePrev))*MILLIS_TO_SECONDS;
  velocityLeftErrorTimePrev = velocityLeftErrorTimeCurr;
  velocityRightErrorTimePrev = velocityRightErrorTimeCurr;

//Need to figure out how to get to voltage, if we want to get to voltage, etc. Check simulation things

  //calculate motor write values
  motorValLeft = Kp_forwardVelLeft*(targetVelocity-leftMotorVelocity)+Ki_forwardVelLeft*(leftVelocityInt);
  motorValRight = Kp_forwardVelRight*(targetVelocity-rightMotorVelocity)+Ki_forwardVelRight*(rightVelocityInt);

  Tminus1=T;
}



// Encoder interrupt
void LeftTick() {
  leftCountAccumulate ++;
  if(leftCountAccumulate >= 10){
    leftCountAccumulate = 0;
    leftMotorDT = micros()-leftMotorPrevTime;
    leftMotorPrevTime = micros();
    leftMotorAngularVelocity = leftDirection*(10.0/4.44)/(leftMotorDT*MICROS_TO_SECONDS);
  }

  A_CURRENT_STATE_LEFT = digitalRead(LEFT_PIN_A);//read state of signal A
  B_CURRENT_STATE_LEFT = digitalRead(LEFT_PIN_B);//read state of signal B
  
  if (A_CURRENT_STATE_LEFT==B_CURRENT_STATE_LEFT){ //if the signals are the same

    countLeft-=1;//subract from the count
    leftDirection = -1;
  }
  else {//if signals are different
    countLeft+=1;//add 2 to the count
    leftDirection = 1;
  }
}

void RightTick() {
  rightCountAccumulate ++;
  if(rightCountAccumulate >= 10 || rightCountAccumulate <= -10){
    rightCountAccumulate = 0;
    rightMotorDT = micros()-rightMotorPrevTime;
    rightMotorPrevTime = micros();
    rightMotorAngularVelocity = rightDirection*(10.0/4.44)/(rightMotorDT*MICROS_TO_SECONDS); 
  }

  A_CURRENT_STATE_RIGHT = digitalRead(RIGHT_PIN_A); //read state of signal A
  B_CURRENT_STATE_RIGHT = digitalRead(RIGHT_PIN_B); //read state of signal B
  
  if (A_CURRENT_STATE_RIGHT==B_CURRENT_STATE_RIGHT){ //if the signals are the same

    countRight+=1;//subract from the count
    rightCountAccumulate ++;
    rightDirection = 1;
  }
  else {//if signals are different
    countRight-=1;//add 2 to the count
    rightDirection = -1;
  }
}
